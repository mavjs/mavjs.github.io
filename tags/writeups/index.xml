<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeups on Ye Myat Kaung (Maverick)</title>
    <link>https://mavjs.org/tags/writeups/</link>
    <description>Recent content in Writeups on Ye Myat Kaung (Maverick)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>&amp;copy; 2016 Ye Myat Kaung (Maverick)</copyright>
    <lastBuildDate>Fri, 31 Jan 2014 09:27:00 +0000</lastBuildDate>
    <atom:link href="https://mavjs.org/tags/writeups/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Nullcon HackIM 2014] Forensics 2 Writeup</title>
      <link>https://mavjs.org/post/nullcon-hackim-2014-forensics-2-writeup/</link>
      <pubDate>Fri, 31 Jan 2014 09:27:00 +0000</pubDate>
      
      <guid>https://mavjs.org/post/nullcon-hackim-2014-forensics-2-writeup/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Points: 200&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description: There was a zip file on the desktop. I can&amp;rsquo;t remember the password for it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We saw a zip file named: &lt;strong&gt;&amp;ldquo;null password.zip&amp;rdquo;&lt;/strong&gt; on the desktop. When
opened, there are 2 files which are encrypted. So it was clear that we
needed to crack the zip.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://mavjs.org/img/nullcon-hackim-2014-forensics-2-writeup_s1600_Selection_271.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;First we looked at some hints from the challenge creator ;)&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/Hint?src=hash&#34;&gt;#Hint&lt;/a&gt; for FOR2 &amp;quot;User was too dumb to store the password in the protected zip file itself&amp;quot;  &lt;a href=&#34;https://twitter.com/hashtag/HackIM?src=hash&#34;&gt;#HackIM&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ForensicChallenge?src=hash&#34;&gt;#ForensicChallenge&lt;/a&gt; &lt;a href=&#34;https://twitter.com/nullcon&#34;&gt;@nullcon&lt;/a&gt; &lt;a href=&#34;https://twitter.com/null0x00&#34;&gt;@null0x00&lt;/a&gt;&lt;/p&gt;&amp;mdash; Prince Komal Boonlia (@boonlia) &lt;a href=&#34;https://twitter.com/boonlia/status/426989036436078592&#34;&gt;January 25, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/Hint?src=hash&#34;&gt;#Hint&lt;/a&gt; for FOR2 &amp;quot;Why would someone put two files if it could have been done with one file&amp;quot;  &lt;a href=&#34;https://twitter.com/hashtag/HackIM?src=hash&#34;&gt;#HackIM&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ForensicChallenge?src=hash&#34;&gt;#ForensicChallenge&lt;/a&gt; &lt;a href=&#34;https://twitter.com/nullcon&#34;&gt;@nullcon&lt;/a&gt; &lt;a href=&#34;https://twitter.com/null0x00&#34;&gt;@null0x00&lt;/a&gt;&lt;/p&gt;&amp;mdash; Prince Komal Boonlia (@boonlia) &lt;a href=&#34;https://twitter.com/boonlia/status/426968851012530176&#34;&gt;January 25, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;So, &lt;a href=&#34;https://twitter.com/Maxthatsme&#34;&gt;Beard-0&lt;/a&gt; looked at a freshly booted VM of the image (since I was lazy + forgot to save the initial snapshot and was already working on another Forensic challenge) and looked at the Temp folder in AppData/Local, there he found a folder name &lt;strong&gt;Rar$DI99.160&lt;/strong&gt; inside which had one of the file &lt;strong&gt;&amp;ldquo;Null final1.pdf&amp;rdquo;&lt;/strong&gt;. From this we looked at known attacks on zip files and found &lt;a href=&#34;https://en.wikipedia.org/wiki/Known-plaintext_attack&#34;&gt;https://en.wikipedia.org/wiki/Known-plaintext_attack&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://mavjs.org/img/nullcon-hackim-2014-forensics-2-writeup_s1600_Selection_272.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We zipped the &lt;strong&gt;&amp;ldquo;Null final1.pdf&amp;rdquo;&lt;/strong&gt; into a zip. Installed the evaluation edition of Ultimate Zip Cracker - &lt;a href=&#34;http://download.cnet.com/Ultimate-ZIP-Cracker/3000-2092_4-10040839.html&#34;&gt;http://download.cnet.com/Ultimate-ZIP-Cracker/3000-2092_4-10040839.html&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://mavjs.org/img/nullcon-hackim-2014-forensics-2-writeup_s1600_Selection_273.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt; Selected the &amp;ldquo;Plaintext attack&amp;rdquo; recovery method.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://mavjs.org/img/nullcon-hackim-2014-forensics-2-writeup_s1600_Selection_274.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Chose the &amp;ldquo;Null final1.pdf&amp;rdquo; zip file as plaintext file.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://mavjs.org/img/nullcon-hackim-2014-forensics-2-writeup_s1600_Selection_275.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;And finally we had the unzip&amp;rsquo;d archive.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Nullcon HackIM 2014] Forensics 5 Writeup</title>
      <link>https://mavjs.org/post/nullcon-hackim-2014-forensics-5-writeup/</link>
      <pubDate>Mon, 27 Jan 2014 15:24:00 +0000</pubDate>
      
      <guid>https://mavjs.org/post/nullcon-hackim-2014-forensics-5-writeup/</guid>
      <description>&lt;p&gt;I play security competitions called Capture The Flag (CTF) with a
group called &lt;a href=&#34;http://gliderswirley.org&#34;&gt;Glider Swirley&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Points: 500&lt;/strong&gt;
&lt;strong&gt;Description: The client says that the system was compromise. There was no evidence found for the same. The client claims that some anti-forensics tool was used to remove the evidences. Our investigator agrees to it. Can you find out what was the command that was executed and at what time it was done?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There was a hint for it by one of the organizers.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/Hint?src=hash&#34;&gt;#Hint&lt;/a&gt; for FOR5 &amp;quot;it crashed when it was being cleaned up&amp;quot;  &lt;a href=&#34;https://twitter.com/hashtag/HackIM?src=hash&#34;&gt;#HackIM&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ForensicChallenge?src=hash&#34;&gt;#ForensicChallenge&lt;/a&gt; &lt;a href=&#34;https://twitter.com/nullcon&#34;&gt;@nullcon&lt;/a&gt; &lt;a href=&#34;https://twitter.com/null0x00&#34;&gt;@null0x00&lt;/a&gt;&lt;/p&gt;&amp;mdash; Prince Komal Boonlia (@boonlia) &lt;a href=&#34;https://twitter.com/boonlia/status/427135133129269248&#34;&gt;January 25, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Since all the forensics challenges were based on 1 VM image, it was already known that the image is Windows 7 SP1 x86, thus the profile to use for volatility - &lt;a href=&#34;https://code.google.com/p/volatility/ was&#34;&gt;https://code.google.com/p/volatility/ was&lt;/a&gt; &lt;strong&gt;Win7SP1x86&lt;/strong&gt;. So I acquired the memory dump of the system (MEMORY.DMP)&lt;/p&gt;

&lt;p&gt;As this was the first time we (me &amp;amp; &lt;a href=&#34;https://twitter.com/Maxthatsme&#34;&gt;Beard-0&lt;/a&gt;) had to use volatility, I tried to get familiar with it by looking at the process list. Issued with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell-session&#34;&gt;    [nullcon-2014] &amp;gt;&amp;gt;&amp;gt; % vol.py -f MEMORY.DMP --profile=Win7SP1x86 pslist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Showed a few processes. But clearly by that I knew it wasn&amp;rsquo;t show me anything about a command being executed or a process crashing. Beard-0 looked through a few usage of volatility and found &lt;strong&gt;cmdscan&lt;/strong&gt;. So I tried it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell-session&#34;&gt;    [nullcon-2014] &amp;gt;&amp;gt;&amp;gt; % vol.py -f MEMORY.DMP --profile=Win7SP1x86 cmdscan 
    Volatility Foundation Volatility Framework 2.3.1
    **************************************************
    CommandProcess: conhost.exe Pid: 2200
    CommandHistory: 0x292a70 Application: TPAutoConnect.exe Flags: Allocated
    CommandCount: 0 LastAdded: -1 LastDisplayed: -1
    FirstCommand: 0 CommandCountMax: 50
    ProcessHandle: 0x58
    **************************************************
    CommandProcess: conhost.exe Pid: 2996
    CommandHistory: 0x5f04f8 Application: cmd.exe Flags: Allocated, Reset
    CommandCount: 2 LastAdded: 1 LastDisplayed: 1
    FirstCommand: 0 CommandCountMax: 50
    ProcessHandle: 0x58
    Cmd #0 @ 0x5ed400: cd desktop
    Cmd #1 @ 0x5f4730: sdelete -c -z c:
    Cmd #36 @ 0x5c00c4: ^?_?\???\
    Cmd #37 @ 0x5ed108: _?\????
    **************************************************
    CommandProcess: conhost.exe Pid: 2996
    CommandHistory: 0x5f0698 Application: sdelete.exe Flags: Allocated
    CommandCount: 0 LastAdded: -1 LastDisplayed: -1
    FirstCommand: 0 CommandCountMax: 50
    ProcessHandle: 0x50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it seems the process we want is &lt;strong&gt;sdelete -c -z c:&lt;/strong&gt;, but the flag format requires, the command and the time. So definitely it seems, we need a screenshot of when the process crashed. Now does volatility have a screenshot feature? Well, since it&amp;rsquo;s so awesome it does.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell-session&#34;&gt;    [nullcon-2014] &amp;gt;&amp;gt;&amp;gt; % vol.py -f MEMORY.DMP --profile=Win7SP1x86 screenshot --dump-dir shots/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just needs a directory to dump the screenshots and voila, one of
the screenshots shows up:

&lt;figure &gt;
    
        &lt;img src=&#34;https://mavjs.org/img/nullcon-hackim-2014-forensics-5-writeup_s1600_session_1.WinSta0.Default.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zeromutarts CTF Crypto Challenges</title>
      <link>https://mavjs.org/post/zeromutarts-ctf-crypto-challenges/</link>
      <pubDate>Mon, 27 Jan 2014 15:08:00 +0000</pubDate>
      
      <guid>https://mavjs.org/post/zeromutarts-ctf-crypto-challenges/</guid>
      <description>

&lt;h2 id=&#34;the-magic-of-rsa-100&#34;&gt;The magic of rsa (100)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;You were able to hear some whispering on the last crypto party!
*whisper* $d$ is 35181901. Keep it secret or we are doomed!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We were given 2 files for the challenge.&lt;/p&gt;

&lt;h3 id=&#34;1-rsa-py&#34;&gt;1) rsa.py&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    #!/usr/bin/env python
    import sys
    n= 65354147
    e = 13
    d = ??

    f = open( sys.argv[1] , &amp;quot;r&amp;quot; )
        for line in f: 
        line = int(line.strip())
        # you&#39;ll have to insert the decrypt function for each line(number) here!
        #dec = ...
        print chr(dec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-rsa-txt&#34;&gt;2) rsa.txt&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;    32588732
    56947340
    16730166
    16529146
    17037091
    9958499
    18895626
    49410873
    58063242
    16529146
    18895626
    30273022
    58063242
    30273022
    60194095
    9956852
    58063242
    44337129
    16730166
    5059543
    40999214
    39158796
    5059543
    58063242
    54302449
    9958499
    58063242
    8646641
    16730166
    51307370
    16730166
    57845836
    16730166
    34996934
    32762958
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you read up about &lt;a href=&#34;https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29#Decryption&#34;&gt;RSA decryption&lt;/a&gt; on Wikipedia, it&amp;rsquo;s pretty
simple and straightforward to solve this challenge. You need $C$ =
ciphertext (we got loads of it there in rsa.txt, just need to use one by
one), $d$ = private key exponent (we got that as well), $n$ = modulus for
both private and public keys. Thus, $M \equiv C^{d} \bmod n$&lt;/p&gt;

&lt;p&gt;Here, I used &lt;a href=&#34;https://cloud.sagemath.com&#34;&gt;sagemath&lt;/a&gt; cloud application to solve it as follows. You could actually save the following into a python script and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    n = 65354147
    d = 35181901
    ctuple = [32588732,56947340,16730166,16529146,17037091,9958499,18895626,49410873,
    58063242,16529146,18895626,30273022,58063242,30273022,60194095,9956852,58063242,
    44337129,16730166,5059543,40999214,39158796,5059543,58063242,54302449,9958499,5806
    3242,8646641,16730166,51307370,16730166,57845836,16730166,34996934,32762958]
    result = &amp;quot;&amp;quot;

    for i in ctuple:
        lol = pow(i, d, n)
        result += chr(lol)
    print &amp;quot;Result for http://zeromutarts.de/task/rsa_magic : &amp;quot; + result
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rivest-shamir-adleman-250&#34;&gt;rivest-shamir-adleman (250)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;*This one is important, we have no clue how to decrypt the secret message! Can you help us?*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We were given 2 files for this challenge as well.&lt;/p&gt;

&lt;h3 id=&#34;1-rivest-py&#34;&gt;1) rivest.py&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    #!/usr/bin/env python
    import sys
    n= 80646413
    e = 5

    # You&#39;ll have to find the d yourself..
    d = unknown

    f = open( sys.argv[1] , &amp;quot;r&amp;quot; )
    for line in f: 
        line = int(line.strip())
        # you&#39;ll have to insert the decrypt function for each line(number) here!
        #dec = ...
        print chr(dec)

    # might come handy
    def xgcd(a,b):
        &amp;quot;&amp;quot;&amp;quot;Extended GCD:
        Returns (gcd, x, y) where gcd is the greatest common divisor of a and b
        with the sign of b if b is nonzero, and with the sign of a if b is 0.
        The numbers x,y are such that gcd = ax+by.&amp;quot;&amp;quot;&amp;quot;
        prevx, x = 1, 0;  prevy, y = 0, 1
        while b:
            q, r = divmod(a,b)
            x, prevx = prevx - q*x, x
            y, prevy = prevy - q*y, y
            a, b = b, r
        return a, prevx, prevy

    def modinv(a, m):
        &amp;quot;&amp;quot;&amp;quot;Modular multiplicative inverse, i.e. a^-1 = 1 (mod m)&amp;quot;&amp;quot;&amp;quot;
        a, u, v = xgcd(a, m)
        if a &amp;lt;&amp;gt; 1:
            raise Exception(&#39;No inverse: %d (mod %d)&#39; % (a, m))
        return u
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-rivest-txt&#34;&gt;2) rivest.txt&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;    72895864
    15633602
    38820479
    60303684
    7458706
    60299530
    20682371
    54642689
    26066811
    32615038
    35349196
    76400140
    38820479
    56463813
    80491201
    76400140
    35349196
    69567074
    26066811
    76400140
    74270178
    76127647
    76127647
    15633602
    76400140
    60303684
    38820479
    56463813
    60303684
    76400140
    72844764
    76127647
    69302434
    15633602
    80491201
    76400140
    6809712
    26066811
    76400140
    42498798
    60299530
    76127647
    69302434
    80491201
    33234011
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time we seriously need sagemath to solve it. :) Since we don&amp;rsquo;t know the $d$ to decrypt the messages for this challenge, we first need to
find the $p$ &amp;amp; $q$ to get $d$. The most straightforward way to get that is to
use &lt;a href=&#34;https://en.wikipedia.org/wiki/Fermat%27s_factorization_method&#34;&gt;Fermat&amp;rsquo;s Factorization method&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I used the formula from here: &lt;a href=&#34;http://facthacks.cr.yp.to/fermat.html&#34;&gt;http://facthacks.cr.yp.to/fermat.html&lt;/a&gt; to
get $p$ &amp;amp; $q$.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    n = 80646413
    e = 5
    ctuple = [72895864,15633602,38820479,60303684,7458706,60299530,20682371,54642689,
    26066811,32615038,35349196,76400140,38820479,56463813,80491201,76400140,35349196,
    69567074,26066811,76400140,74270178,76127647,76127647,15633602,76400140,60303684,
    38820479,56463813,60303684,76400140,72844764,76127647,69302434,15633602,80491201,
    76400140,6809712,26066811,76400140,42498798,60299530,76127647,69302434,80491201,
    33234011]
    def fermatfactor(N):
       if N &amp;lt;= 0: return [N]
       if is_even(N): return [2,N/2]
       a = ceil(sqrt(N))
       while not is_square(a^2-N):
         a = a + 1
       b = sqrt(a^2-N)
       return [a - b,a + b]
    p, q = fermatfactor(n)

    phi=(p-1)*(q-1)
    d=pow(e,-1,phi)

    result = &amp;quot;&amp;quot;
    for i in ctuple:
        lol=pow(i,d,n)
        result+=chr(lol)
    print &amp;quot;Result for result http://zeromutarts.de/task/rivest-shamir-adleman : &amp;quot; + result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>